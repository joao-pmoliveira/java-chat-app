package clientchatapp;

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.AdjustmentEvent;
import java.awt.event.AdjustmentListener;
import java.awt.event.KeyEvent;
import java.awt.event.WindowEvent;
import java.io.IOException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.SwingConstants;
import static javax.swing.SwingConstants.LEFT;
import static javax.swing.SwingConstants.RIGHT;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import myprotocol.Rules;

/**
 *
 * @author joaoo
 */
public class ClientFormChatApp extends javax.swing.JFrame {
    ClientUser client;
    HashMap<Integer, Component> onlineRoomComponents;
    int targetUserID;
    int clients;
    HashMap<Integer, String> onlineUsers;
    ArrayList<Integer> newChatRoomUsers;
    
    /**
     * Creates new form ClientFormChatApp
     */
    public ClientFormChatApp() {
        try 
        {
           UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
            System.out.println(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException | IllegalAccessException | InstantiationException | UnsupportedLookAndFeelException e) {
            System.out.println("Erro a definir look and feel da nova janela");
        }
        initComponents();
        onlineRoomComponents = new HashMap<>();
        onlineUsers = new HashMap<>();
        newChatRoomUsers = new ArrayList<>();
        targetUserID = 0;
        clients = 0;
        
        scrollBar.getVerticalScrollBar().addAdjustmentListener(new AdjustmentListener() {  
            @Override
            public void adjustmentValueChanged(AdjustmentEvent e) {  
                e.getAdjustable().setValue(e.getAdjustable().getMaximum());  
            }
        });
        
    }

    public void setTargetUserID(int newTargetId){
        if( newTargetId < 0 ) return;
        targetUserID = newTargetId;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        chatPanel = new javax.swing.JPanel();
        enviarPanel = new javax.swing.JPanel();
        messageTextField = new javax.swing.JTextField();
        sendButton = new javax.swing.JButton();
        scrollBar = new javax.swing.JScrollPane();
        messagesPanel = new javax.swing.JPanel();
        statusPanel = new javax.swing.JPanel();
        usernameTextField = new javax.swing.JTextField();
        connectButton = new javax.swing.JButton();
        usersScrollPane = new javax.swing.JScrollPane();
        usersPanel = new javax.swing.JPanel();
        addGroupBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(0, 420));
        setResizable(false);

        chatPanel.setAutoscrolls(true);

        messageTextField.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        messageTextField.setAlignmentY(0.0F);
        messageTextField.setName(""); // NOI18N
        messageTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                messageTextFieldKeyPressed(evt);
            }
        });

        sendButton.setBackground(new java.awt.Color(49, 135, 182));
        sendButton.setForeground(new java.awt.Color(255, 255, 255));
        sendButton.setText("Send");
        sendButton.setVerifyInputWhenFocusTarget(false);
        sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout enviarPanelLayout = new javax.swing.GroupLayout(enviarPanel);
        enviarPanel.setLayout(enviarPanelLayout);
        enviarPanelLayout.setHorizontalGroup(
            enviarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(enviarPanelLayout.createSequentialGroup()
                .addComponent(messageTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 466, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sendButton, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        enviarPanelLayout.setVerticalGroup(
            enviarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(messageTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
            .addComponent(sendButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        scrollBar.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        scrollBar.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        messagesPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 4, 1, 4));
        messagesPanel.setLayout(new javax.swing.BoxLayout(messagesPanel, javax.swing.BoxLayout.Y_AXIS));
        scrollBar.setViewportView(messagesPanel);

        javax.swing.GroupLayout chatPanelLayout = new javax.swing.GroupLayout(chatPanel);
        chatPanel.setLayout(chatPanelLayout);
        chatPanelLayout.setHorizontalGroup(
            chatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(enviarPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(scrollBar)
        );
        chatPanelLayout.setVerticalGroup(
            chatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(chatPanelLayout.createSequentialGroup()
                .addComponent(scrollBar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(enviarPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        usernameTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                usernameTextFieldKeyPressed(evt);
            }
        });

        connectButton.setText("Connect");
        connectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButtonActionPerformed(evt);
            }
        });

        usersScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        usersPanel.setBackground(new java.awt.Color(255, 255, 255));
        usersPanel.setForeground(new java.awt.Color(255, 255, 255));
        usersPanel.setAlignmentY(0.0F);
        usersPanel.setOpaque(false);
        usersPanel.setLayout(new javax.swing.BoxLayout(usersPanel, javax.swing.BoxLayout.Y_AXIS));
        usersScrollPane.setViewportView(usersPanel);

        addGroupBtn.setText("+");
        addGroupBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addGroupBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout statusPanelLayout = new javax.swing.GroupLayout(statusPanel);
        statusPanel.setLayout(statusPanelLayout);
        statusPanelLayout.setHorizontalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(usernameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE)
            .addComponent(usersScrollPane)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addComponent(connectButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addGroupBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        statusPanelLayout.setVerticalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(usernameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(connectButton)
                    .addComponent(addGroupBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(usersScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 352, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(statusPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chatPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(statusPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(chatPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void connectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectButtonActionPerformed
        tryConnectionToServer();
    }//GEN-LAST:event_connectButtonActionPerformed

    private void usernameTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_usernameTextFieldKeyPressed
        if( evt.getKeyCode() == KeyEvent.VK_ENTER ){
            tryConnectionToServer();
        }
    }//GEN-LAST:event_usernameTextFieldKeyPressed

    private void sendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendButtonActionPerformed
        trySendMessageToUser();
    }//GEN-LAST:event_sendButtonActionPerformed

    private void messageTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_messageTextFieldKeyPressed
        if( evt.getKeyCode() == KeyEvent.VK_ENTER ){
            trySendMessageToUser();
        }
    }//GEN-LAST:event_messageTextFieldKeyPressed

    private void addGroupBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addGroupBtnActionPerformed
        System.out.println("Try to add group");
        //if(client == null) return;
        //if(!client.isConnected()) return;
        newChatRoomUsers.clear();
        
        JFrame frame = new JFrame("Test");
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        try 
        {
           UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException | IllegalAccessException | InstantiationException | UnsupportedLookAndFeelException e) {
            System.out.println("Erro a definir look and feel da nova janela");
        }
        
        JPanel panel = new JPanel();
        panel.setPreferredSize(new Dimension(500,300));
        JScrollPane scrollPane = new JScrollPane(panel, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED, JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        
        for(int userID : onlineUsers.keySet()){
            if(userID == 0) continue;
            JButton nBtn = new JButton(userID + "|"+ onlineUsers.get(userID));
            nBtn.setPreferredSize( new Dimension( connectButton.getWidth(), connectButton.getHeight() ) );
            nBtn.setForeground(Color.BLACK);
            nBtn.addActionListener( (ActionEvent e) -> {
                if(newChatRoomUsers.contains(userID)){
                    newChatRoomUsers.remove(Integer.valueOf(userID));
                    System.out.println("REMOVED");
                    nBtn.setForeground(Color.BLACK);
                }
                else{
                    newChatRoomUsers.add(userID);
                    nBtn.setForeground(Color.GREEN);
                }
            });
            panel.add(nBtn);
        }
        
        JButton confirmarBtn = new JButton("Confirmar Sala");
        confirmarBtn.setPreferredSize( new Dimension( connectButton.getWidth(), connectButton.getHeight() ) );
        confirmarBtn.addActionListener( (ActionEvent e) -> {
            try {
                askServerToAddRoom();
            } catch (IOException ex) {
                System.out.println(ex);
            }
            frame.dispatchEvent(new WindowEvent(frame, WindowEvent.WINDOW_CLOSING));
        });
        panel.add(confirmarBtn);
            
        JButton cancelBtn = new JButton("Cancelar");
        cancelBtn.setPreferredSize( new Dimension( connectButton.getWidth(), connectButton.getHeight() ) );
        cancelBtn.addActionListener( (ActionEvent e) -> {
            newChatRoomUsers.clear();
            frame.dispatchEvent(new WindowEvent(frame, WindowEvent.WINDOW_CLOSING));
        });
        panel.add(cancelBtn);
        
        frame.add(panel);
        frame.pack();
        frame.setLocationByPlatform(true);
        frame.setVisible(true);
        frame.setResizable(false);
    }//GEN-LAST:event_addGroupBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClientFormChatApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClientFormChatApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClientFormChatApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClientFormChatApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new ClientFormChatApp().setVisible(true);
        });
    }
    
    public void newMessageReceived(String msg, String from){
        addMessageToPanel(msg, from, true);
    }
    
    public void newRoomChatCreate(int roomId, String roomName){
        JButton newButton = new JButton(roomName + " #" + roomId);
        clients++;
        Dimension buttonSize = new Dimension(usersPanel.getWidth() - 30, connectButton.getHeight());
        newButton.setMaximumSize(buttonSize);
        newButton.setPreferredSize(buttonSize);
        newButton.setHorizontalTextPosition(SwingConstants.CENTER);
        newButton.setAlignmentX(0.5f);
        usersPanel.add(newButton);
        newButton.addActionListener((ActionEvent e) -> {
            setTargetUserID(roomId);
            System.out.println("Changed Target Id to: " + roomId);
        });
        onlineRoomComponents.put(roomId, newButton);
        usersPanel.revalidate();
    }
    public void roomChatRemoved(int roomId, String roomName){
        JButton buttonToRemove = (JButton) onlineRoomComponents.get(roomId);
        if(buttonToRemove == null) return;
        onlineRoomComponents.remove(roomId);
        usersPanel.remove(buttonToRemove);
        clients--;
        usersPanel.revalidate();
        usersPanel.repaint();
    }
    
    public void newUserConnected(int clientId, String username){
        onlineUsers.put(clientId, username);
    }
    public void userDisconnected(int clientId, String username){
        onlineUsers.remove(clientId);
    }
    
    public void askServerToAddRoom() throws IOException{
        if(newChatRoomUsers.isEmpty()) return;
        if(client == null) return;
        if(!client.isConnected()) return;
        System.out.println("users:" + newChatRoomUsers);
        
        client.reserveNewChatRoom( newChatRoomUsers );
    }
    
    private void tryConnectionToServer(){
        try{
            String username = usernameTextField.getText();
            username = Rules.legalizeUsername(username);
            if(!Rules.isUsernameLegal(username)) return;
            
            client = new ClientUser(this);
            client.ConnectToServer(username);
            connectButton.setEnabled(false);
            usernameTextField.setFocusable(false);
        }
        catch(IOException ex){
            Logger.getLogger(ClientFormChatApp.class.getName()).log(Level.SEVERE, null, ex);
        }
    }    
    
    private void trySendMessageToUser(){
        if(client == null) return;
        if(!client.isConnected()) return;
        if(messageTextField.getText().isBlank()) return;
        if(targetUserID < 0 ) return;
        //if(!onlineUserComponents.containsKey(targetUserID)) return;
        
        String message = messageTextField.getText();
        try {
            client.sendMessageToUser(targetUserID, message);
            messageTextField.setText("");
            addMessageToPanel(message, "", false);
        } catch (IOException ex) {
            Logger.getLogger(ClientFormChatApp.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void addMessageToPanel(String message, String from, boolean isReceived){
        System.out.println("from: "+from);
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("HH:mm");
        String currentDate = String.format("[%s]", LocalDateTime.now().format(formatter));
        
        String sender = isReceived ? from : "";
        JLabel textArea = new JLabel();
        if(isReceived){
            textArea.setText("<html> " + currentDate + sender + ": "+message + "</html>" ) ;
            textArea.setHorizontalAlignment(LEFT);
        }
        else{
            textArea.setText( "<html>" + message + " :"+ currentDate + "</html>" );
            textArea.setHorizontalAlignment(RIGHT);
        }
        
        messagesPanel.add(textArea);
        messagesPanel.revalidate();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addGroupBtn;
    private javax.swing.JPanel chatPanel;
    private javax.swing.JButton connectButton;
    private javax.swing.JPanel enviarPanel;
    private javax.swing.JTextField messageTextField;
    private javax.swing.JPanel messagesPanel;
    private javax.swing.JScrollPane scrollBar;
    private javax.swing.JButton sendButton;
    private javax.swing.JPanel statusPanel;
    private javax.swing.JTextField usernameTextField;
    private javax.swing.JPanel usersPanel;
    private javax.swing.JScrollPane usersScrollPane;
    // End of variables declaration//GEN-END:variables
}
